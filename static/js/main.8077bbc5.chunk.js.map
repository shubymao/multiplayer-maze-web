{"version":3,"sources":["lib/maze-generator.ts","lib/canvas.ts","pages/GenerateDemo.tsx","pages/MultiplayerMaze.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","maze","seen","START_CORD","r","c","ALL_DIRS","TOP","RIGHT","DOWN","LEFT","globalSeed","Math","random","getOPDir","dir","hasWall","cell","breakWall","grid","cord","create2DArray","size","val","Array","fill","map","setSeed","inputSeed","rand","x","sin","floor","getDirs","dirs","arr","i","length","ind","temp","shuffle","getNextCord","delta","getDirCordOffset","Error","isOutOfBound","isVisited","visit","depthFirstSearch","update","a","nextCord","generateMaze","params","userSeed","onUpdate","padX","padY","gridSize","cellSize","sleep","ms","Promise","resolve","setTimeout","getContext","canvas","height","width","context","rCord","cCord","drawWall","beginPath","strokeStyle","moveTo","lineTo","closePath","stroke","drawCell","clearRect","drawIndicatorSquare","fillStyle","drawGrid","reduce","prev","row","isValidGrid","min","initDimension","drawBoundary","getOnUpdate","delay","handleChange","callBack","check","event","value","target","parseInt","GenerationDemo","canvasRef","useRef","useState","setSize","setDelay","toString","seed","busy","setIsBusy","bigScreen","useMediaQuery","query","canvasSize","setCanvasSize","useEffect","onClick","current","updateSize","n","updateDelay","d","updateSeed","s","className","ref","onChange","type","MultiPlayerMaze","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8077bbc5.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum Direction {\n  TOP = 1, // 0001\n  RIGHT = 2, // 0010\n  DOWN = 4, // 0100\n  LEFT = 8 // 1000\n}\nexport type Cell = number;\nexport type Cord = { r: number; c: number };\nexport type OnUpdate = (grid: Cell[][], cord: Cord) => Promise<void>;\nexport type Config = { userSeed?: number; onUpdate?: OnUpdate };\nexport const START_CORD = { r: 0, c: 0 };\nexport const ALL_DIRS = [Direction.TOP, Direction.RIGHT, Direction.DOWN, Direction.LEFT];\nconst ALL_WALL = 15; // 1111\nlet globalSeed: number = Math.random() * 1e9;\nlet maze: Cell[][];\nlet seen: boolean[][];\n\nexport function isValidGrid(grid?: Cell[][]): boolean {\n  if (!grid) return false;\n  if (grid.length === 0) return false;\n  const size = grid.length;\n  const col = grid.reduce((prev, row) => {\n    if (!row || row.length !== prev) return -1;\n    return prev;\n  }, size);\n  if (col === -1) return false;\n  return true;\n}\n\nexport function getOPDir(dir: Direction): Direction {\n  if (dir === Direction.TOP) return Direction.DOWN;\n  if (dir === Direction.RIGHT) return Direction.LEFT;\n  if (dir === Direction.DOWN) return Direction.TOP;\n  return Direction.RIGHT;\n}\n\nexport function getDirCordOffset(dir: Direction): number[] {\n  if (dir === Direction.TOP) return [-1, 0];\n  if (dir === Direction.RIGHT) return [0, 1];\n  if (dir === Direction.DOWN) return [1, 0];\n  return [0, -1];\n}\n\nexport function hasWall(cell: Cell, dir: Direction): boolean {\n  return (cell & dir) !== 0;\n}\n\nexport function breakWall(grid: Cell[][], cord: Cord, dir: Direction): void {\n  const { r, c } = cord;\n  if (hasWall(grid[r][c], dir)) grid[r][c] ^= dir;\n}\n\nexport function create2DArray<T>(size: number, val: T): T[][] {\n  const arr = new Array<Array<T>>(size);\n  return arr.fill([]).map(() => new Array<T>(size).fill(val));\n}\n\nexport function getRandomSeed(): number {\n  return Math.floor(Math.random() * 1e9);\n}\n\nfunction setSeed(inputSeed?: number) {\n  if (inputSeed) globalSeed = inputSeed;\n  else globalSeed = Math.random() * 1e9;\n}\n\nexport function rand(): number {\n  if (!globalSeed) return Math.random();\n  const x = Math.sin(globalSeed) * 100000;\n  globalSeed++;\n  return x - Math.floor(x);\n}\n\nexport function shuffle<T>(arr: T[]): void {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const ind = Math.floor(rand() * (i + 1));\n    const temp = arr[i];\n    arr[i] = arr[ind];\n    arr[ind] = temp;\n  }\n}\n\nexport function getDirs(): Direction[] {\n  const dirs = [Direction.TOP, Direction.RIGHT, Direction.DOWN, Direction.LEFT];\n  shuffle(dirs);\n  return dirs;\n}\n\nexport function getNextCord(cord: Cord, dir: Direction): Cord {\n  const delta = getDirCordOffset(dir);\n  if (!delta) throw new Error('Delta not found.');\n  return { r: cord.r + delta[0], c: cord.c + delta[1] };\n}\n\nexport function isOutOfBound(grid: Cell[][], cord: Cord): boolean {\n  const { r, c } = cord;\n  if (r < 0 || c < 0 || r >= grid.length || c >= grid[0].length) return true;\n  return false;\n}\n\nexport function isVisited(cord: Cord): boolean {\n  const { r, c } = cord;\n  return seen[r][c];\n}\n\nexport function visit(cord: Cord): void {\n  const { r, c } = cord;\n  seen[r][c] = true;\n}\n\nasync function depthFirstSearch(cord: Cord, update?: OnUpdate): Promise<void> {\n  const dirs = getDirs();\n  visit(cord);\n  if (update) await update(maze, cord);\n  for (const dir of dirs) {\n    const nextCord = getNextCord(cord, dir);\n    if (!isOutOfBound(maze, nextCord) && !isVisited(nextCord)) {\n      breakWall(maze, cord, dir);\n      breakWall(maze, nextCord, getOPDir(dir));\n      await depthFirstSearch(nextCord, update);\n    }\n  }\n}\n\nexport async function generateMaze(size: number, params: Config = {}): Promise<Cell[][]> {\n  const { userSeed, onUpdate } = params;\n  maze = create2DArray<Cell>(size, ALL_WALL);\n  seen = create2DArray<boolean>(size, false);\n  setSeed(userSeed);\n  await depthFirstSearch(START_CORD, onUpdate);\n  return maze;\n}\n","import { Cell, Cord, Direction, hasWall, isValidGrid, ALL_DIRS, OnUpdate } from './maze-generator';\n\nexport type CanvasOrNull = HTMLCanvasElement | null;\nexport type Context = CanvasRenderingContext2D;\nconst PADDING = 10;\nconst BORDER_COLOR = '#000000';\nconst INDICATOR_COLOR = '#FF0000';\nlet padX = 0;\nlet padY = 0;\nlet gridSize = -1;\nlet cellSize = -1;\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nfunction getContext(canvas?: CanvasOrNull) {\n  if (!canvas) throw new Error('Canvas is not defined.');\n  const { height, width } = canvas;\n  const context = canvas.getContext('2d');\n  if (!context) throw new Error('Unable to get context.');\n  return { context, height, width };\n}\n\nfunction rCord(r: number) {\n  return padY + r * cellSize;\n}\n\nfunction cCord(c: number) {\n  return padX + c * cellSize;\n}\n\nfunction initDimension(width: number, height: number, grid: Cell[][]): void {\n  gridSize = Math.min(width, height) - 2 * PADDING;\n  cellSize = gridSize / grid.length;\n  padY = (height - gridSize) / 2;\n  padX = (width - gridSize) / 2;\n}\n\nfunction drawBoundary(context: Context) {\n  if (gridSize > 0) {\n    context.beginPath();\n    context.moveTo(padX, padY);\n    context.lineTo(padX + gridSize, padY);\n    context.lineTo(padX + gridSize, padY + gridSize);\n    context.lineTo(padX, padY + gridSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawWall(context: Context, cord: Cord, dir: Direction) {\n  const { r, c } = cord;\n  context.beginPath();\n  context.strokeStyle = BORDER_COLOR;\n  if (dir === Direction.TOP || dir === Direction.LEFT) context.moveTo(rCord(r), cCord(c));\n  else context.moveTo(rCord(r + 1), cCord(c + 1));\n  if (dir === Direction.TOP || dir === Direction.RIGHT) context.lineTo(rCord(r), cCord(c + 1));\n  else context.lineTo(rCord(r + 1), cCord(c));\n  context.closePath();\n  context.stroke();\n}\n\nfunction drawCell(context: Context, cell: Cell, cord: Cord) {\n  const { r, c } = cord;\n  context.clearRect(rCord(r), cCord(c), gridSize, gridSize);\n  for (const dir of ALL_DIRS) {\n    if (hasWall(cell, dir)) {\n      drawWall(context, { r, c }, dir);\n    }\n  }\n}\n\nfunction drawIndicatorSquare(context: Context, cord: Cord) {\n  context.beginPath();\n  context.fillStyle = INDICATOR_COLOR;\n  const { r, c } = cord;\n  context.moveTo(rCord(r) + 1, cCord(c) + 1);\n  context.lineTo(rCord(r) + 1, cCord(c + 1) - 1);\n  context.lineTo(rCord(r + 1) - 1, cCord(c + 1) - 1);\n  context.lineTo(rCord(r + 1) - 1, cCord(c) + 1);\n  context.closePath();\n  context.fill();\n}\n\nexport function clearCanvas(canvas?: CanvasOrNull): void {\n  const { context, height, width } = getContext(canvas);\n  context.clearRect(0, 0, width, height);\n}\n\nexport default function drawGrid(canvas?: CanvasOrNull, grid?: Cell[][]): void {\n  if (!grid || !isValidGrid(grid)) throw new Error('Grid not valid');\n  const { context, height, width } = getContext(canvas);\n  initDimension(width, height, grid);\n  context.clearRect(0, 0, width, height);\n  drawBoundary(context);\n  for (let r = 0; r < grid.length; r++) {\n    for (let c = 0; c < grid[0].length; c++) {\n      drawCell(context, grid[r][c], { r, c });\n    }\n  }\n}\n\nexport function getOnUpdate(canvas: CanvasOrNull, delay = 50): OnUpdate {\n  const { context } = getContext(canvas);\n  return async (grid: Cell[][], cord: Cord) => {\n    drawGrid(canvas, grid);\n    drawIndicatorSquare(context, cord);\n    await sleep(delay);\n  };\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport drawGrid, { getOnUpdate } from '../lib/canvas';\nimport { generateMaze, getRandomSeed } from '../lib/maze-generator';\n\nfunction handleChange(callBack: React.Dispatch<string>, check: (nVal: number) => boolean) {\n  return (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    if (!value || check(parseInt(value, 10))) callBack(value);\n  };\n}\n\nfunction GenerationDemo(): JSX.Element {\n  const canvasRef: React.LegacyRef<HTMLCanvasElement> = useRef(null);\n  const [size, setSize] = useState('10');\n  const [delay, setDelay] = useState('10');\n  const [seed, setSeed] = useState(getRandomSeed().toString());\n  const [busy, setIsBusy] = useState(false);\n  const bigScreen = useMediaQuery({ query: '(min-width: 550px)' });\n  const [canvasSize, setCanvasSize] = useState(bigScreen ? 500 : 250);\n\n  useEffect(() => {\n    setCanvasSize(bigScreen ? 500 : 200);\n  }, [bigScreen]);\n\n  const onClick = async () => {\n    if (busy) return;\n    setIsBusy(true);\n    const canvas = canvasRef.current;\n    const onUpdate = getOnUpdate(canvas, parseInt(delay, 10));\n    const userSeed = parseInt(seed, 10);\n    const maze = await generateMaze(parseInt(size, 10), { onUpdate, userSeed });\n    if (canvas) drawGrid(canvas, maze);\n    setIsBusy(false);\n  };\n\n  const updateSize = handleChange(setSize, (n) => n <= 50);\n  const updateDelay = handleChange(setDelay, (d) => d < 400);\n  const updateSeed = handleChange(setSeed, (s) => s < 100000);\n\n  return (\n    <div className=\"w-full min-h-screen bg-gray-700\">\n      <div className=\"space-y-3 flex flex-col items-center p-4 text-white\">\n        <h1 className=\"text-4xl my-4\">Generation Demo</h1>\n        <canvas ref={canvasRef} width={canvasSize} height={canvasSize} className=\"bg-white\" />\n        <div className=\"flex flex-wrap w-full gap-3 items-center place-content-center text-center text-black\">\n          <div className=\"flex flex-col items-center\">\n            <p className=\"inline-block text-white text-lg\">Size</p>\n            <input className=\"w-16\" value={size} onChange={updateSize} />\n          </div>\n          <div className=\"flex flex-col items-center\">\n            <p className=\"inline-block text-white text-lg\">Delay(ms)</p>\n            <input className=\"w-16\" value={delay} onChange={updateDelay} />\n          </div>\n          <div className=\"flex flex-col items-center\">\n            <p className=\"inline-block text-white text-lg\">Seed</p>\n            <input className=\"w-20\" value={seed} onChange={updateSeed} />\n          </div>\n          <div className=\"flex flex-col items-center\">\n            <button\n              className=\"p-3 rounded-lg bg-green-500 hover:bg-green-300\"\n              onClick={onClick}\n              type=\"submit\"\n            >\n              Generate Maze\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GenerationDemo;\n","import React from 'react';\n\nfunction MultiPlayerMaze(): JSX.Element {\n  return (\n    <div className=\"w-full h-screen flex flex-col space-y-3 text-center items-center\">\n      <h1>Maze Multiplayer</h1>\n    </div>\n  );\n}\n\nexport default MultiPlayerMaze;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport GenerationDemo from './pages/GenerateDemo';\nimport MultiPlayerMaze from './pages/MultiplayerMaze';\n\nfunction App(): JSX.Element {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/online\">\n          <MultiPlayerMaze />\n        </Route>\n        <Route path=\"/\">\n          <GenerationDemo />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}