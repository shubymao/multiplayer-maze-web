{"version":3,"sources":["components/button.tsx","components/canvas.tsx","type.ts","components/container.tsx","components/label-input.tsx","constants.ts","components/nav.tsx","lib/direction-util.ts","lib/maze-generator.ts","lib/misc-util.ts","lib/canvas-manager.ts","pages/GenerateDemo.tsx","components/joy-stick.tsx","lib/game.ts","pages/Maze.tsx","lib/multiplayer-game.ts","pages/MultiplayerMaze.tsx","App.tsx","index.tsx"],"names":["Button","props","onClick","color","label","className","type","Canvas","React","forwardRef","ref","size","onKeyUp","onKeyDown","width","height","defaultProps","Direction","Container","children","tabIndex","role","LabelInput","value","onChange","TOAST_CONFIG","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","KEY_MAP","ArrowLeft","LEFT","ArrowUp","TOP","ArrowRight","RIGHT","ArrowDown","DOWN","IDLE_CONTROL","magnitude","angle","ID_CHARSET","PLAYER_RADIUS_TO_CELL_RATIO","START_POS","r","c","DEFAULT_PLAYER_COLOR","LINKS","name","url","Nav","items","map","item","charAt","to","href","ALL_DIRS_ARR","getOPDir","dir","hasDirection","cell","removeDir","dirCombo","getControlFromDir","dx","dy","Math","atan2","maze","seen","START_CORD","globalSeed","random","breakWall","grid","cord","create2DArray","val","Array","fill","setSeed","inputSeed","rand","x","sin","floor","getDirs","dirs","arr","i","length","ind","temp","shuffle","getNextCord","delta","getDirCordOffset","Error","isOutOfBound","isVisited","visit","depthFirstSearch","update","a","nextCord","depthFirstSearchSync","generateMaze","params","userSeed","onUpdate","generateMazeSync","getCanvasSize","bigScreen","midScreen","getContext","canvas","ctx","getOnKey","keyDirs","control","event","key","preventDefault","current","addDir","getOffKey","getOnStick","ctrl","getOffStick","generatePlayer","position","id","len","result","charSetLen","index","push","join","generateRandomID","location","randomColorFromString","str","rgb","toString","toUpperCase","substring","intToRGB","hash","charCodeAt","hashCode","TWO_PI","PI","sleep","ms","Promise","resolve","setTimeout","getOnUpdate","canvasManager","delay","cm","drawGrid","drawIndicatorSquare","CanvasManager","padX","padY","gridSize","cellSize","playerRadius","clearCanvas","clearRect","reduce","prev","row","isValidGrid","initDimension","drawBoundary","drawCell","fillStyle","drawSquare","drawStartFinish","drawPlayer","lineWidth","drawCircle","stroke","min","radius","beginPath","cCord","y","rCord","arc","closePath","moveTo","lineTo","strokeStyle","drawWall","this","handleChange","callBack","check","target","parseInt","GenerationDemo","canvasRef","createRef","useState","setSize","setDelay","seed","busy","setIsBusy","useMediaQuery","query","canvasSize","setCanvasSize","useEffect","updateSize","n","updateDelay","d","updateSeed","s","JOY_STICK_CONFIG","threshold","top","left","mode","dynamicPage","JoyStick","onEventHandler","onStick","offEventHandler","offStick","myContainer","manager","useRef","onEvent","useCallback","evt","data","distance","radian","config","zone","nipplejs","create","on","off","destroy","style","Game","level","player","opPositions","getMaze","getMyPlayer","setOpponentsPos","positions","performMove","nr","nc","cos","getBoundedCord","tr","tc","max","MARGIN","checkWin","dr","abs","dc","renderGame","refreshContext","forEach","pos","Maze","setLevel","game","animationRef","onKey","offKey","animate","requestAnimationFrame","cancelAnimationFrame","firebase","initializeApp","apiKey","process","authDomain","databaseURL","storageBucket","MultiplayerGame","onGameOver","isWinner","lastUpdatedPosition","refMap","counter","realTimeDB","updateMyLocation","setNewSeed","render","cleanUp","removePlayer","addSeedListener","path","seedRef","snapshot","initNewGame","set","newSeed","addPlayersListener","apiPath","addPlayerRef","onOtherPlayerJoin","removePlayerRef","onOtherPlayerLeave","newChild","playerId","playerRef","removedChild","del","delete","remove","registerMyPlayer","myPlayer","newPos","oldPos","database","Map","win","toast","success","error","MultiPlayerMaze","gameRef","window","onbeforeunload","App","exact","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.4a423ccd.chunk.js","sourcesContent":["import React, { MouseEventHandler } from 'react';\n\ninterface LabelInputProp {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  color: string;\n  label: string;\n}\n\nconst Button = (props: LabelInputProp): JSX.Element => {\n  const { onClick, color, label } = props;\n  return (\n    <button\n      className={`p-3 rounded-lg ${color} bg-opacity-90 hover:bg-opacity-100`}\n      onClick={onClick}\n      type=\"submit\"\n    >\n      {label}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { KeyboardEventHandler, LegacyRef } from 'react';\n\ninterface CanvasProps {\n  onKeyDown?: KeyboardEventHandler<HTMLCanvasElement>;\n  onKeyUp?: KeyboardEventHandler<HTMLCanvasElement>;\n  size: number;\n}\n\nconst Canvas = React.forwardRef(\n  (props: CanvasProps, ref: LegacyRef<HTMLCanvasElement>): JSX.Element => {\n    const { size, onKeyUp, onKeyDown } = props;\n    return (\n      <canvas\n        onKeyDown={onKeyDown}\n        onKeyUp={onKeyUp}\n        ref={ref}\n        width={size}\n        height={size}\n        className=\"bg-white\"\n      />\n    );\n  }\n);\n\nCanvas.defaultProps = {\n  onKeyDown: () => true,\n  onKeyUp: () => true\n};\n\nexport default Canvas;\n","import { KeyboardEventHandler, MutableRefObject } from 'react';\n\n// eslint-disable-next-line\nexport enum Direction {\n  TOP = 1, // 0001\n  RIGHT = 2, // 0010\n  DOWN = 4, // 0100\n  LEFT = 8 // 1000\n}\nexport type Link = { name: string; url: string };\nexport type Cell = number;\nexport type Cord = { r: number; c: number };\nexport type OnUpdate = (grid: Cell[][], cord: Cord) => Promise<void>;\nexport type Config = { userSeed?: number; onUpdate?: OnUpdate };\nexport type CanvasOrNull = HTMLCanvasElement | null;\nexport type Ctx = CanvasRenderingContext2D;\nexport type Control = { magnitude: number; angle: number };\nexport type Player = { id: string; location: Cord };\nexport type RRef<T> = MutableRefObject<T>;\nexport type kHandler<T> = KeyboardEventHandler<T>;\nexport type Context = { ctx: Ctx; width: number; height: number };\n","import React, { FC, KeyboardEventHandler } from 'react';\n\nexport interface ContainerProps {\n  onKeyDown?: KeyboardEventHandler<HTMLDivElement>;\n  onKeyUp?: KeyboardEventHandler<HTMLDivElement>;\n  children: JSX.Element | Array<JSX.Element>;\n}\n\nconst Container: FC<ContainerProps> = (props: ContainerProps) => {\n  const { children, onKeyDown, onKeyUp } = props;\n  return (\n    <div\n      tabIndex={0}\n      role=\"button\"\n      onKeyDown={onKeyDown}\n      onKeyUp={onKeyUp}\n      className=\"w-full cursor-default min-h-screen bg-gray-700\"\n    >\n      <div className=\"space-y-3 flex flex-col items-center p-4 text-white\">{children}</div>\n    </div>\n  );\n};\n\nexport default Container;\n","import React, { ChangeEventHandler } from 'react';\n\ninterface LabelInputProp {\n  value: string | number;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  label: string;\n}\n\nconst LabelInput = (props: LabelInputProp): JSX.Element => {\n  const { value, onChange, label } = props;\n  return (\n    <div className=\"flex flex-col text-black items-center\">\n      <p className=\"inline-block text-white text-lg\">{label}</p>\n      <input\n        className=\"w-16 text-center bg-gray-200 focus:bg-white\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default LabelInput;\n","import { Control, Cord, Direction, Link } from './type';\n\nconst LINKS: Array<Link> = [\n  { name: 'Home', url: 'https://shuby-mao.web.app/' },\n  { name: 'Project Page', url: 'https://shuby-mao.web.app/projects/web-multiplayer-maze' },\n  { name: 'Multiplayer Maze', url: '/online' },\n  { name: 'Generator Demo', url: '/generator' },\n  { name: 'Offline Maze', url: '/' }\n];\n\nexport const FIREBASE_CONFIG = {\n  apiKey: process.env.REACT_APP_firebase_apiKey,\n  authDomain: process.env.REACT_APP_firebase_authDomain,\n  databaseURL: process.env.REACT_APP_firebase_databaseURL,\n  storageBucket: process.env.REACT_APP_firebase_storageBucket\n};\n\nexport const TOAST_CONFIG = {\n  autoClose: 5000,\n  hideProgressBar: true,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n};\n\nexport interface StringMap {\n  [key: string]: number;\n}\n\nexport const KEY_MAP: StringMap = {\n  ArrowLeft: Direction.LEFT,\n  ArrowUp: Direction.TOP,\n  ArrowRight: Direction.RIGHT,\n  ArrowDown: Direction.DOWN\n};\n\nexport const IDLE_CONTROL: Control = { magnitude: 0, angle: 0 };\n\nexport const ID_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nexport const ID_LEN = 10;\n\nexport const PLAYER_RADIUS_TO_CELL_RATIO = 0.15;\n\nexport const MAX_SPEED = 0.05;\n\nexport const START_POS: Cord = { r: 0.5, c: 0.5 };\nexport const GRID_PADDING = 5;\nexport const START_COLOR = '#DC2626';\nexport const END_COLOR = '#10B981';\nexport const BORDER_COLOR = '#000000';\nexport const INDICATOR_COLOR = '#FF0000';\nexport const DEFAULT_PLAYER_COLOR = '#FBBF24';\n\nexport default LINKS;\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport LINKS from '../constants';\n\nconst Nav: FC = () => {\n  const items = LINKS;\n  return (\n    <div className=\"flex justify-center flex-wrap gap-4 text-white\">\n      {items.map((item) => {\n        return item.url.charAt(0) === '/' ? (\n          <Link className=\"hover:text-green-500\" key={item.name} to={item.url}>\n            {item.name}\n          </Link>\n        ) : (\n          <a href={item.url} key={item.name} className=\"hover:text-green-500\">\n            {item.name}\n          </a>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Nav;\n","import { IDLE_CONTROL } from '../constants';\nimport { Cell, Control, Direction } from '../type';\n\nexport const ALL_DIRS_ARR = [Direction.TOP, Direction.RIGHT, Direction.DOWN, Direction.LEFT];\nexport const ALL_DIRS_CELL = 15; // 1111\n\nexport function getOPDir(dir: Direction): Direction {\n  if (dir === Direction.TOP) return Direction.DOWN;\n  if (dir === Direction.RIGHT) return Direction.LEFT;\n  if (dir === Direction.DOWN) return Direction.TOP;\n  return Direction.RIGHT;\n}\n\nexport function getDirCordOffset(dir: Direction): number[] {\n  if (dir === Direction.TOP) return [-1, 0];\n  if (dir === Direction.RIGHT) return [0, 1];\n  if (dir === Direction.DOWN) return [1, 0];\n  return [0, -1];\n}\n\nexport function hasDirection(cell: Cell, dir: Direction): boolean {\n  const hasDir = (cell & dir) !== 0;\n  return hasDir;\n}\n\nexport function removeDir(dirCombo: number, dir: Direction): number {\n  if (hasDirection(dirCombo, dir)) return dirCombo ^ dir;\n  return dirCombo;\n}\n\nexport function addDir(dirCombo: number, dir: Direction): number {\n  return dirCombo | dir;\n}\n\nexport default function getControlFromDir(dir: number): Control {\n  let [dx, dy] = [0, 0];\n  if (hasDirection(dir, Direction.TOP)) dy += 1;\n  if (hasDirection(dir, Direction.DOWN)) dy -= 1;\n  if (hasDirection(dir, Direction.RIGHT)) dx += 1;\n  if (hasDirection(dir, Direction.LEFT)) dx -= 1;\n  if (dy === 0 && dx === 0) return IDLE_CONTROL;\n  const angle = Math.atan2(dy, dx);\n  return { angle, magnitude: 1 };\n}\n","import { Cell, Cord, OnUpdate, Config, Direction } from '../type';\nimport { ALL_DIRS_CELL, getDirCordOffset, getOPDir, removeDir } from './direction-util';\n\nexport const START_CORD = { r: 0, c: 0 };\n\nlet globalSeed: number = Math.random() * 1e9;\nlet maze: Cell[][];\nlet seen: boolean[][];\n\nexport function isValidGrid(grid?: Cell[][]): boolean {\n  if (!grid) return false;\n  if (grid.length === 0) return false;\n  const size = grid.length;\n  const col = grid.reduce((prev, row) => {\n    if (!row || row.length !== prev) return -1;\n    return prev;\n  }, size);\n  if (col === -1) return false;\n  return true;\n}\n\nexport function breakWall(grid: Cell[][], cord: Cord, dir: Direction): void {\n  const { r, c } = cord;\n  grid[r][c] = removeDir(grid[r][c], dir);\n}\n\nexport function create2DArray<T>(size: number, val: T): T[][] {\n  const arr = new Array<Array<T>>(size);\n  return arr.fill([]).map(() => new Array<T>(size).fill(val));\n}\n\nexport function getRandomSeed(): number {\n  return Math.floor(Math.random() * 100000);\n}\n\nfunction setSeed(inputSeed?: number) {\n  if (inputSeed) globalSeed = inputSeed;\n  else globalSeed = Math.random() * 1e9;\n}\n\nexport function rand(): number {\n  if (!globalSeed) return Math.random();\n  const x = Math.sin(globalSeed) * 100000;\n  globalSeed++;\n  return x - Math.floor(x);\n}\n\nexport function shuffle<T>(arr: T[]): void {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const ind = Math.floor(rand() * (i + 1));\n    const temp = arr[i];\n    arr[i] = arr[ind];\n    arr[ind] = temp;\n  }\n}\n\nexport function getDirs(): Direction[] {\n  const dirs = [Direction.TOP, Direction.RIGHT, Direction.DOWN, Direction.LEFT];\n  shuffle(dirs);\n  return dirs;\n}\n\nexport function getNextCord(cord: Cord, dir: Direction): Cord {\n  const delta = getDirCordOffset(dir);\n  if (!delta) throw new Error('Delta not found.');\n  return { r: cord.r + delta[0], c: cord.c + delta[1] };\n}\n\nexport function isOutOfBound(grid: Cell[][], cord: Cord): boolean {\n  const { r, c } = cord;\n  if (r < 0 || c < 0 || r >= grid.length || c >= grid[0].length) return true;\n  return false;\n}\n\nexport function isVisited(cord: Cord): boolean {\n  const { r, c } = cord;\n  return seen[r][c];\n}\n\nexport function visit(cord: Cord): void {\n  const { r, c } = cord;\n  seen[r][c] = true;\n}\n\nasync function depthFirstSearch(cord: Cord, update?: OnUpdate): Promise<void> {\n  const dirs = getDirs();\n  visit(cord);\n  if (update) await update(maze, cord);\n  for (const dir of dirs) {\n    const nextCord = getNextCord(cord, dir);\n    if (!isOutOfBound(maze, nextCord) && !isVisited(nextCord)) {\n      breakWall(maze, cord, dir);\n      breakWall(maze, nextCord, getOPDir(dir));\n      await depthFirstSearch(nextCord, update);\n    }\n  }\n}\n\nfunction depthFirstSearchSync(cord: Cord): void {\n  const dirs = getDirs();\n  visit(cord);\n  for (const dir of dirs) {\n    const nextCord = getNextCord(cord, dir);\n    if (!isOutOfBound(maze, nextCord) && !isVisited(nextCord)) {\n      breakWall(maze, cord, dir);\n      breakWall(maze, nextCord, getOPDir(dir));\n      depthFirstSearchSync(nextCord);\n    }\n  }\n}\n\nexport async function generateMaze(size: number, params: Config = {}): Promise<Cell[][]> {\n  const { userSeed, onUpdate } = params;\n  maze = create2DArray<Cell>(size, ALL_DIRS_CELL);\n  seen = create2DArray<boolean>(size, false);\n  setSeed(userSeed);\n  await depthFirstSearch(START_CORD, onUpdate);\n  return maze;\n}\n\nexport function generateMazeSync(size: number, userSeed?: number): Cell[][] {\n  maze = create2DArray<Cell>(size, ALL_DIRS_CELL);\n  seen = create2DArray<boolean>(size, false);\n  setSeed(userSeed);\n  depthFirstSearchSync(START_CORD);\n  return maze;\n}\n","import { IDLE_CONTROL, ID_CHARSET, ID_LEN, KEY_MAP } from '../constants';\nimport { CanvasOrNull, Context, Control, Cord, kHandler, Player, RRef } from '../type';\nimport getControlFromDir, { addDir, removeDir } from './direction-util';\n\nexport default function getCanvasSize(bigScreen: boolean, midScreen: boolean): number {\n  if (bigScreen) return 500;\n  if (midScreen) return 350;\n  return 250;\n}\n\nexport function getContext(canvas?: CanvasOrNull): Context {\n  if (!canvas) throw new Error('Canvas is not defined.');\n  const { height, width } = canvas;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) throw new Error('Unable to get context.');\n  return { ctx, height, width };\n}\n\nexport const getOnKey = <T>(keyDirs: RRef<number>, control: RRef<Control>): kHandler<T> => {\n  const onKeyDown: kHandler<T> = (event) => {\n    const dir = KEY_MAP[event.key] || 0;\n    if (dir !== 0) event.preventDefault();\n    keyDirs.current = addDir(keyDirs.current, dir);\n    control.current = getControlFromDir(keyDirs.current);\n  };\n  return onKeyDown;\n};\n\nexport const getOffKey = <T>(keyDirs: RRef<number>, control: RRef<Control>): kHandler<T> => {\n  const onKeyUp: kHandler<T> = (event) => {\n    const dir = KEY_MAP[event.key] || 0;\n    if (dir !== 0) event.preventDefault();\n    keyDirs.current = removeDir(keyDirs.current, dir);\n    control.current = getControlFromDir(keyDirs.current);\n  };\n  return onKeyUp;\n};\n\nexport const getOnStick = (control: RRef<Control>) => {\n  return (ctrl: Control): void => {\n    control.current = ctrl;\n  };\n};\n\nexport const getOffStick = (control: RRef<Control>) => {\n  return (): void => {\n    control.current = IDLE_CONTROL;\n  };\n};\n\nfunction generateRandomID(len: number) {\n  const result = [];\n  const charSetLen = ID_CHARSET.length;\n  for (let i = 0; i < len; i++) {\n    const index = Math.floor(Math.random() * charSetLen);\n    result.push(ID_CHARSET.charAt(index));\n  }\n  return result.join('');\n}\n\nexport function generatePlayer(position: Cord): Player {\n  const id = generateRandomID(ID_LEN);\n  const location = position;\n  return { id, location };\n}\n\nfunction hashCode(str: string) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return hash;\n}\n\nfunction intToRGB(i: number) {\n  const c = (i & 0x00ffffff).toString(16).toUpperCase();\n  return '00000'.substring(0, 6 - c.length) + c;\n}\n\nexport function randomColorFromString(str: string): string {\n  const rgb = intToRGB(hashCode(str));\n  return `#${rgb}`;\n}\n","import { isValidGrid } from './maze-generator';\nimport { Direction, Cell, Cord, CanvasOrNull, Ctx, OnUpdate } from '../type';\nimport { hasDirection, ALL_DIRS_ARR } from './direction-util';\nimport {\n  BORDER_COLOR,\n  DEFAULT_PLAYER_COLOR,\n  END_COLOR,\n  GRID_PADDING,\n  INDICATOR_COLOR,\n  PLAYER_RADIUS_TO_CELL_RATIO,\n  START_COLOR\n} from '../constants';\nimport { getContext } from './misc-util';\n\nconst TWO_PI = 2 * Math.PI;\nconst DEFAULT_STOKE_WIDTH = 1;\nconst PLAYER_STOKE_WIDTH = 2;\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\nexport function getOnUpdate(canvasManager: CanvasManager, delay = 50): OnUpdate {\n  const cm = canvasManager;\n  return async (grid: Cell[][], cord: Cord) => {\n    cm.drawGrid(grid);\n    cm.drawIndicatorSquare(cord);\n    await sleep(delay);\n  };\n}\n\nexport default class CanvasManager {\n  private canvas: CanvasOrNull;\n\n  private ctx: Ctx;\n\n  private width: number;\n\n  private height: number;\n\n  private padX = 0;\n\n  private padY = 0;\n\n  private gridSize = -1;\n\n  private cellSize = -1;\n\n  private playerRadius = -1;\n\n  constructor(canvas: CanvasOrNull) {\n    this.canvas = canvas;\n    const { ctx, height, width } = getContext(this.canvas);\n    this.ctx = ctx;\n    this.width = width;\n    this.height = height;\n  }\n\n  public refreshContext(): void {\n    const { ctx, height, width } = getContext(this.canvas);\n    this.ctx = ctx;\n    this.width = width;\n    this.height = height;\n  }\n\n  public clearCanvas = (): void => {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  };\n\n  public drawGrid = (grid?: Cell[][]): void => {\n    if (!grid || !isValidGrid(grid)) throw new Error('Grid not valid');\n    this.initDimension(this.width, this.height, grid);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.drawBoundary();\n    for (let r = 0; r < grid.length; r++) {\n      for (let c = 0; c < grid[0].length; c++) {\n        this.drawCell(grid[r][c], { r, c });\n      }\n    }\n  };\n\n  public drawIndicatorSquare = (cord: Cord): void => {\n    this.ctx.fillStyle = INDICATOR_COLOR;\n    this.drawSquare(cord);\n    this.ctx.fill();\n  };\n\n  public drawStartFinish = (maze: number[][]): void => {\n    this.ctx.fillStyle = START_COLOR;\n    this.drawSquare({ r: 0, c: 0 });\n    this.ctx.fill();\n    this.ctx.fillStyle = END_COLOR;\n    this.drawSquare({ r: maze.length - 1, c: maze.length - 1 });\n    this.ctx.fill();\n  };\n\n  public drawPlayer = (cord: Cord, color: string = DEFAULT_PLAYER_COLOR): void => {\n    this.ctx.fillStyle = color;\n    this.ctx.lineWidth = PLAYER_STOKE_WIDTH;\n    this.drawCircle(cord, this.playerRadius);\n    this.ctx.fill();\n    this.ctx.stroke();\n  };\n\n  private initDimension = (width: number, height: number, grid: Cell[][]): void => {\n    this.gridSize = Math.min(width, height) - 2 * GRID_PADDING;\n    this.cellSize = this.gridSize / grid.length;\n    this.playerRadius = this.cellSize * PLAYER_RADIUS_TO_CELL_RATIO;\n    this.padY = (height - this.gridSize) / 2;\n    this.padX = (width - this.gridSize) / 2;\n  };\n\n  private drawCircle = (cord: Cord, radius: number): void => {\n    this.ctx.beginPath();\n    const x = this.cCord(cord.c);\n    const y = this.rCord(cord.r);\n    this.ctx.arc(x, y, radius, 0, TWO_PI);\n    this.ctx.closePath();\n  };\n\n  private drawSquare = (cord: Cord): void => {\n    const { r, c } = cord;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.cCord(c) + 1, this.rCord(r) + 1);\n    this.ctx.lineTo(this.cCord(c + 1) - 1, this.rCord(r) + 1);\n    this.ctx.lineTo(this.cCord(c + 1) - 1, this.rCord(r + 1) - 1);\n    this.ctx.lineTo(this.cCord(c) + 1, this.rCord(r + 1) - 1);\n    this.ctx.closePath();\n  };\n\n  private rCord = (r: number) => {\n    return this.padY + r * this.cellSize;\n  };\n\n  private cCord = (c: number) => {\n    return this.padX + c * this.cellSize;\n  };\n\n  private drawBoundary = (): void => {\n    if (this.gridSize > 0) {\n      this.ctx.lineWidth = DEFAULT_STOKE_WIDTH;\n      this.ctx.strokeStyle = BORDER_COLOR;\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.padX, this.padY);\n      this.ctx.lineTo(this.padX + this.gridSize, this.padY);\n      this.ctx.lineTo(this.padX + this.gridSize, this.padY + this.gridSize);\n      this.ctx.lineTo(this.padX, this.padY + this.gridSize);\n      this.ctx.closePath();\n      this.ctx.stroke();\n    }\n  };\n\n  private drawCell = (cell: Cell, cord: Cord): void => {\n    for (const dir of ALL_DIRS_ARR) {\n      if (hasDirection(cell, dir)) {\n        this.drawWall(cord, dir);\n      }\n    }\n  };\n\n  private drawWall = (cord: Cord, dir: Direction): void => {\n    const { r, c } = cord;\n    this.ctx.beginPath();\n    if (dir === Direction.TOP || dir === Direction.LEFT)\n      this.ctx.moveTo(this.cCord(c), this.rCord(r));\n    else this.ctx.moveTo(this.cCord(c + 1), this.rCord(r + 1));\n    if (dir === Direction.TOP || dir === Direction.RIGHT)\n      this.ctx.lineTo(this.cCord(c + 1), this.rCord(r));\n    else this.ctx.lineTo(this.cCord(c), this.rCord(r + 1));\n    this.ctx.closePath();\n    this.ctx.stroke();\n  };\n}\n","import React, { createRef, useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport Button from '../components/button';\nimport Canvas from '../components/canvas';\nimport Container from '../components/container';\nimport LabelInput from '../components/label-input';\nimport Nav from '../components/nav';\nimport CanvasManager, { getOnUpdate } from '../lib/canvas-manager';\nimport { generateMaze, getRandomSeed } from '../lib/maze-generator';\n\nfunction handleChange(callBack: React.Dispatch<string>, check: (nVal: number) => boolean) {\n  return (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    if (!value || check(parseInt(value, 10))) callBack(value);\n  };\n}\n\nfunction GenerationDemo(): JSX.Element {\n  const canvasRef: React.LegacyRef<HTMLCanvasElement> = createRef();\n\n  const [size, setSize] = useState('10');\n  const [delay, setDelay] = useState('30');\n  const [seed, setSeed] = useState(getRandomSeed().toString());\n  const [busy, setIsBusy] = useState(false);\n  const bigScreen = useMediaQuery({ query: '(min-width: 550px)' });\n  const [canvasSize, setCanvasSize] = useState(bigScreen ? 500 : 250);\n\n  useEffect(() => {\n    setCanvasSize(bigScreen ? 500 : 200);\n  }, [bigScreen]);\n\n  const onClick = async () => {\n    if (busy) return;\n    setIsBusy(true);\n    const canvas = canvasRef.current;\n    const canvasManager = new CanvasManager(canvas);\n    const onUpdate = getOnUpdate(canvasManager, parseInt(delay, 10));\n    const userSeed = parseInt(seed, 10);\n    const maze = await generateMaze(parseInt(size, 10), { onUpdate, userSeed });\n    canvasManager.drawGrid(maze);\n    setIsBusy(false);\n  };\n\n  const updateSize = handleChange(setSize, (n) => n <= 50);\n  const updateDelay = handleChange(setDelay, (d) => d < 400);\n  const updateSeed = handleChange(setSeed, (s) => s < 100000);\n\n  return (\n    <Container>\n      <h1 className=\"text-4xl my-4\">Generation Demo</h1>\n      <Nav />\n      <Canvas ref={canvasRef} size={canvasSize} />\n      <div className=\"flex flex-wrap gap-3 items-center place-content-center\">\n        <LabelInput label=\"Size\" value={size} onChange={updateSize} />\n        <LabelInput label=\"Delay\" value={delay} onChange={updateDelay} />\n        <LabelInput label=\"Seed\" value={seed} onChange={updateSeed} />\n        <Button color=\"bg-green-500\" onClick={onClick} label=\"Generate\" />\n      </div>\n    </Container>\n  );\n}\n\nexport default GenerationDemo;\n","import React, { createRef, useCallback, useEffect, useRef } from 'react';\nimport nipplejs, {\n  EventData,\n  JoystickManager,\n  JoystickManagerOptions,\n  JoystickOutputData\n} from 'nipplejs';\nimport { Control } from '../type';\n\nexport const JOY_STICK_CONFIG: JoystickManagerOptions = {\n  color: '#000000',\n  threshold: 0.1,\n  position: { top: '50%', left: '50%' },\n  mode: 'static',\n  dynamicPage: true\n};\n\nexport interface JoyStickProps {\n  size: number;\n  onStick: (control: Control) => void;\n  offStick: () => void;\n}\n\nconst JoyStick = (props: JoyStickProps): JSX.Element => {\n  const { size, onStick: onEventHandler, offStick: offEventHandler } = props;\n  const myContainer = createRef<HTMLDivElement>();\n  const manager = useRef<JoystickManager | null>(null);\n\n  const onEvent = useCallback(\n    (evt: EventData, data: JoystickOutputData): void => {\n      const control: Control = { magnitude: (data.distance / size) * 2, angle: data.angle.radian };\n      onEventHandler(control);\n    },\n    [onEventHandler, size]\n  );\n\n  useEffect(() => {\n    const config = JOY_STICK_CONFIG;\n    config.zone = myContainer.current as HTMLElement;\n    config.size = size;\n    manager.current = nipplejs.create(config);\n    manager.current.on('move', onEvent);\n    manager.current.on('end', offEventHandler);\n    return () => {\n      offEventHandler();\n      manager.current?.off('move', onEvent);\n      manager.current?.off('end', offEventHandler);\n      manager.current?.destroy();\n    };\n  }, [manager, size, onEvent, offEventHandler, myContainer]);\n\n  return (\n    <div\n      className=\"bg-white relative rounded-full\"\n      style={{ width: size + 5, height: size + 5 }}\n      ref={myContainer}\n    />\n  );\n};\n\nexport default JoyStick;\n","import CanvasManager from './canvas-manager';\nimport { generateMazeSync } from './maze-generator';\nimport { Cell, Cord, Direction, CanvasOrNull, Control, Player } from '../type';\nimport { hasDirection } from './direction-util';\nimport { generatePlayer, randomColorFromString } from './misc-util';\nimport { MAX_SPEED, PLAYER_RADIUS_TO_CELL_RATIO as MARGIN, START_POS } from '../constants';\n\nexport default class Game {\n  private canvasManager: CanvasManager;\n\n  private level: number;\n\n  private maze: Cell[][];\n\n  private gridSize: number;\n\n  private player: Player;\n\n  private opPositions?: Map<string, Cord>;\n\n  private seed?: number;\n\n  constructor(canvas: CanvasOrNull, level: number, seed?: number) {\n    this.seed = seed;\n    this.level = level;\n    this.gridSize = this.level + 5;\n    this.player = generatePlayer(START_POS);\n    this.maze = generateMazeSync(this.gridSize, this.seed);\n    this.canvasManager = new CanvasManager(canvas);\n  }\n\n  public getMaze = (): Cell[][] => {\n    return this.maze;\n  };\n\n  public getMyPlayer = (): Player => {\n    return this.player;\n  };\n\n  public setOpponentsPos = (positions: Map<string, Cord>): void => {\n    this.opPositions = positions;\n  };\n\n  public performMove = (control: Control): void => {\n    const { magnitude, angle } = control;\n    let nr = this.player.location.r;\n    let nc = this.player.location.c;\n    nr += -MAX_SPEED * magnitude * Math.sin(angle);\n    nc += MAX_SPEED * magnitude * Math.cos(angle);\n    this.player.location = this.getBoundedCord(nr, nc);\n  };\n\n  private getBoundedCord = (nr: number, nc: number): Cord => {\n    const { r, c } = this.player.location;\n    const [tr, tc] = [Math.floor(r), Math.floor(c)];\n    const cell = this.maze[tr][tc];\n    if (hasDirection(cell, Direction.TOP)) nr = Math.max(tr + MARGIN, nr);\n    if (hasDirection(cell, Direction.DOWN)) nr = Math.min(tr + 1 - MARGIN, nr);\n    if (hasDirection(cell, Direction.LEFT)) nc = Math.max(tc + MARGIN, nc);\n    if (hasDirection(cell, Direction.RIGHT)) nc = Math.min(tc + 1 - MARGIN, nc);\n    return { r: nr, c: nc };\n  };\n\n  public checkWin = (): boolean => {\n    const dr = Math.abs(this.player.location.r - (this.gridSize - 0.5));\n    const dc = Math.abs(this.player.location.c - (this.gridSize - 0.5));\n    return dr <= 0.5 && dc <= 0.5;\n  };\n\n  public renderGame = (): void => {\n    this.canvasManager.refreshContext();\n    this.canvasManager.drawGrid(this.maze);\n    this.canvasManager.drawStartFinish(this.maze);\n    this.opPositions?.forEach((pos, id) =>\n      this.canvasManager.drawPlayer(pos, randomColorFromString(id))\n    );\n    const { location, id } = this.player;\n    this.canvasManager.drawPlayer(location, randomColorFromString(id));\n  };\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport Canvas from '../components/canvas';\nimport Container from '../components/container';\nimport JoyStick from '../components/joy-stick';\nimport Nav from '../components/nav';\nimport { IDLE_CONTROL } from '../constants';\nimport Game from '../lib/game';\nimport getCanvasSize, { getOffStick, getOnStick, getOnKey, getOffKey } from '../lib/misc-util';\nimport { Control } from '../type';\n\nfunction Maze(): JSX.Element {\n  const [level, setLevel] = useState(1);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const bigScreen = useMediaQuery({ query: '(min-width: 600px)' });\n  const midScreen = useMediaQuery({ query: '(min-width: 400px)' });\n  const [canvasSize, setCanvasSize] = useState(getCanvasSize(bigScreen, midScreen));\n  const game = useRef<Game>();\n  const animationRef = useRef(0);\n  const control = useRef<Control>(IDLE_CONTROL);\n  const keyDirs = useRef(0);\n  const onKey = getOnKey(keyDirs, control);\n  const offKey = getOffKey(keyDirs, control);\n  const onStick = getOnStick(control);\n  const offStick = getOffStick(control);\n\n  const animate: FrameRequestCallback = useCallback(() => {\n    game.current?.performMove(control.current);\n    game.current?.renderGame();\n    if (game.current?.checkWin()) {\n      setLevel(level + 1);\n    }\n    animationRef.current = requestAnimationFrame(animate);\n  }, [control, game, level]);\n\n  useEffect(() => {\n    setCanvasSize(getCanvasSize(bigScreen, midScreen));\n  }, [bigScreen, midScreen]);\n\n  useEffect(() => {\n    game.current = new Game(canvasRef.current, level);\n    animationRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(animationRef.current);\n  }, [level, animate]);\n\n  return (\n    <Container onKeyDown={onKey} onKeyUp={offKey}>\n      <h1 className=\"text-4xl my-4 text-center\">Offline Maze Level {level}</h1>\n      <Nav />\n      <Canvas ref={canvasRef} size={canvasSize} />\n      <JoyStick size={120} offStick={offStick} onStick={onStick} />\n    </Container>\n  );\n}\n\nexport default Maze;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport { FIREBASE_CONFIG } from '../constants';\nimport { CanvasOrNull, Control, Cord } from '../type';\nimport Game from './game';\n\nconst REFRESH_THRESHOLD = 10;\nfirebase.initializeApp(FIREBASE_CONFIG);\ntype SnapShot = firebase.database.DataSnapshot;\ntype Reference = firebase.database.Reference;\n\nexport default class MultiplayerGame {\n  private isWinner: boolean;\n\n  private lastUpdatedPosition?: Cord;\n\n  private opPositions: Map<string, Cord>;\n\n  private refMap: Map<string, Reference>;\n\n  private counter = 0;\n\n  private game?: Game;\n\n  private canvas: CanvasOrNull;\n\n  private realTimeDB: firebase.database.Database;\n\n  private onGameOver?: (win: boolean) => void;\n\n  constructor(canvas: CanvasOrNull, onGameOver?: (win: boolean) => void) {\n    this.isWinner = false;\n    this.realTimeDB = firebase.database();\n    this.canvas = canvas;\n    this.opPositions = new Map();\n    this.refMap = new Map();\n    this.addSeedListener();\n    this.addPlayersListener();\n    this.onGameOver = onGameOver;\n  }\n\n  public performMove = (control: Control): void => {\n    if (!this.game) return;\n    this.counter++;\n    this.game.performMove(control);\n    if (this.counter >= REFRESH_THRESHOLD) {\n      this.updateMyLocation();\n      this.counter = 0;\n    }\n    if (this.game.checkWin()) {\n      this.isWinner = true;\n      this.setNewSeed();\n    }\n  };\n\n  public render = (): void => {\n    this.game?.renderGame();\n  };\n\n  public cleanUp = (): void => {\n    if (this.game) this.removePlayer(this.game.getMyPlayer().id, true);\n    this.refMap.forEach((ref) => ref.off());\n  };\n\n  private addSeedListener = () => {\n    const path = '/seed';\n    const seedRef = this.realTimeDB.ref(path);\n    seedRef.on('value', (snapshot) => {\n      const seed = snapshot.val();\n      if (this.game && this.onGameOver) {\n        this.onGameOver(this.isWinner);\n      }\n      this.initNewGame(seed);\n    });\n    this.refMap.set(path, seedRef);\n  };\n\n  private setNewSeed = () => {\n    const newSeed = Math.floor(Math.random() * 1000000);\n    this.realTimeDB.ref('/seed').set(newSeed);\n  };\n\n  private addPlayersListener = (): void => {\n    const apiPath = '/players';\n    const addPlayerRef = this.realTimeDB.ref(apiPath);\n    addPlayerRef.on('child_added', this.onOtherPlayerJoin);\n    this.refMap.set(`${apiPath}-added`, addPlayerRef);\n    const removePlayerRef = this.realTimeDB.ref('/players');\n    removePlayerRef.on('child_removed', this.onOtherPlayerLeave);\n    this.refMap.set(`${apiPath}-removed`, removePlayerRef);\n  };\n\n  private onOtherPlayerJoin = (newChild: SnapShot) => {\n    const playerId = newChild.key;\n    if (playerId && playerId !== this.game?.getMyPlayer().id) {\n      this.opPositions.set(playerId, newChild.val());\n      const apiPath = `/players/${playerId}`;\n      const playerRef = this.realTimeDB.ref(apiPath);\n      playerRef.on('value', (player) => {\n        this.opPositions.set(playerId, player.val());\n      });\n      this.refMap.set(apiPath, playerRef);\n    }\n  };\n\n  private onOtherPlayerLeave = (removedChild: SnapShot) => {\n    const playerId = removedChild.key;\n    if (playerId && playerId !== this.game?.getMyPlayer().id) {\n      this.removePlayer(playerId);\n    }\n  };\n\n  private removePlayer = (playerId: string, del = false): void => {\n    const apiPath = `/players/${playerId}`;\n    this.opPositions.delete(playerId);\n    this.refMap.delete(apiPath);\n    this.realTimeDB.ref(apiPath).off();\n    if (del) this.realTimeDB.ref(apiPath).remove();\n  };\n\n  private registerMyPlayer = (): void => {\n    const myPlayer = this.game?.getMyPlayer();\n    if (!myPlayer) return;\n    this.realTimeDB.ref(`/players/${myPlayer.id}`).set(myPlayer.location);\n  };\n\n  private updateMyLocation = (): void => {\n    const myPlayer = this.game?.getMyPlayer();\n    if (!myPlayer) return;\n    const newPos = myPlayer.location;\n    const oldPos = this.lastUpdatedPosition;\n    if (!oldPos || newPos.c !== oldPos.c || newPos.r !== oldPos.r) {\n      this.realTimeDB.ref(`/players/${myPlayer.id}`).update(newPos);\n      this.lastUpdatedPosition = newPos;\n    }\n  };\n\n  private initNewGame = (seed: number) => {\n    if (this.game) this.removePlayer(this.game.getMyPlayer().id, true);\n    this.game = new Game(this.canvas, 10, seed);\n    this.game.setOpponentsPos(this.opPositions);\n    this.registerMyPlayer();\n    this.isWinner = false;\n  };\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { toast, ToastContainer, ToastPosition } from 'react-toastify';\nimport Canvas from '../components/canvas';\nimport Container from '../components/container';\nimport JoyStick from '../components/joy-stick';\nimport Nav from '../components/nav';\nimport { IDLE_CONTROL, TOAST_CONFIG } from '../constants';\nimport getCanvasSize, { getOnKey, getOffKey, getOnStick, getOffStick } from '../lib/misc-util';\nimport MultiplayerGame from '../lib/multiplayer-game';\nimport { Control } from '../type';\n\nconst position: ToastPosition = 'top-center';\nconst config = { position, ...TOAST_CONFIG };\n\nconst onGameOver = (win: boolean): void => {\n  if (win) toast.success('Congrats, You won the game 🚀', config);\n  else toast.error('Too Slow,  Faster Next Time 😭', config);\n};\n\nfunction MultiPlayerMaze(): JSX.Element {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const bigScreen = useMediaQuery({ query: '(min-width: 600px)' });\n  const midScreen = useMediaQuery({ query: '(min-width: 400px)' });\n  const [canvasSize, setCanvasSize] = useState(getCanvasSize(bigScreen, midScreen));\n  const gameRef = useRef<MultiplayerGame>();\n  const animationRef = useRef(0);\n  const control = useRef<Control>(IDLE_CONTROL);\n  const keyDirs = useRef(0);\n\n  const onKey = getOnKey(keyDirs, control);\n  const offKey = getOffKey(keyDirs, control);\n  const onStick = getOnStick(control);\n  const offStick = getOffStick(control);\n\n  const animate: FrameRequestCallback = useCallback(() => {\n    gameRef.current?.performMove(control.current);\n    gameRef.current?.render();\n    animationRef.current = requestAnimationFrame(animate);\n  }, []);\n\n  useEffect(() => {\n    gameRef.current = new MultiplayerGame(canvasRef.current, onGameOver);\n    return () => gameRef.current?.cleanUp();\n  }, []);\n\n  useEffect(() => {\n    setCanvasSize(getCanvasSize(bigScreen, midScreen));\n  }, [bigScreen, midScreen]);\n\n  useEffect(() => {\n    animationRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(animationRef.current);\n  }, [animate]);\n\n  window.onbeforeunload = () => {\n    gameRef.current?.cleanUp();\n  };\n\n  return (\n    <>\n      <ToastContainer />\n      <Container onKeyDown={onKey} onKeyUp={offKey}>\n        <h1 className=\"text-4xl my-4\">Maze Multiplayer</h1>\n        <Nav />\n        <Canvas ref={canvasRef} size={canvasSize} />\n        <JoyStick size={120} offStick={offStick} onStick={onStick} />\n      </Container>\n    </>\n  );\n}\n\nexport default MultiPlayerMaze;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport GenerationDemo from './pages/GenerateDemo';\nimport Maze from './pages/Maze';\nimport MultiPlayerMaze from './pages/MultiplayerMaze';\n\nfunction App(): JSX.Element {\n  return (\n    <Switch>\n      <Route exact path=\"/online\">\n        <MultiPlayerMaze />\n      </Route>\n      <Route exact path=\"/generator\">\n        <GenerationDemo />\n      </Route>\n      <Route>\n        <Maze />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}